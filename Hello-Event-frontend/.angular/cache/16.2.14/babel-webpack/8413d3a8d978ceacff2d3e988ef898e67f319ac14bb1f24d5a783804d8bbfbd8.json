{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let UserDashboardComponent = class UserDashboardComponent {\n  constructor(authService, eventService, reservationService // Add ReservationService\n  ) {\n    this.authService = authService;\n    this.eventService = eventService;\n    this.reservationService = reservationService;\n    this.userInfo = null;\n    this.updatedUserInfo = {};\n    this.currentView = 'profile';\n    this.events = [];\n    this.selectedEvents = [];\n    this.date = '';\n    this.location = '';\n    this.keyword = '';\n    this.selectedEventId = null; // Add this property\n    this.numberOfTickets = 1; // Add this property to store the number of tickets\n  }\n\n  ngOnInit() {\n    this.loadUserInfo();\n    this.loadAllEvents();\n  }\n  loadUserInfo() {\n    const username = this.authService.getUsername();\n    if (username) {\n      this.authService.getUserInfo(username).subscribe(info => {\n        this.userInfo = info;\n        this.updatedUserInfo = {\n          ...info\n        };\n      }, error => {\n        console.error('Erreur lors de la récupération des informations utilisateur', error);\n      });\n    }\n  }\n  updateUser() {\n    if (this.userInfo) {\n      this.authService.updateUser({\n        ...this.userInfo,\n        ...this.updatedUserInfo\n      }).subscribe(response => {\n        console.log('User updated successfully', response);\n        this.userInfo = response;\n      }, error => {\n        if (error.status === 403) {\n          console.error('Access is forbidden: Check your token and user permissions.');\n        } else {\n          console.error('An error occurred:', error);\n        }\n      });\n    }\n  }\n  changeView(view) {\n    this.currentView = view;\n  }\n  loadAllEvents() {\n    this.eventService.getEvents().subscribe(events => {\n      this.events = events;\n    }, error => {\n      console.error('Erreur lors du chargement des événements', error);\n    });\n  }\n  // Add this method to handle booking an event\n  bookEvent(eventId) {\n    // Logic to open the reservation form with the event ID\n    this.currentView = 'reservation';\n    this.selectedEventId = eventId;\n  }\n  // Add this method to handle reservation confirmation\n  confirmReservation() {\n    if (this.userInfo && this.selectedEventId !== null) {\n      this.reservationService.createReservation(this.userInfo.email, this.selectedEventId, this.numberOfTickets, new Date().toISOString()).subscribe(response => {\n        console.log('Réservation réussie:', response);\n        this.currentView = 'events';\n      }, error => {\n        console.error('Erreur lors de la réservation', error);\n      });\n    }\n  }\n};\nUserDashboardComponent = __decorate([Component({\n  selector: 'app-user-dashboard',\n  templateUrl: './user-dashboard.component.html',\n  styleUrls: ['./user-dashboard.component.css']\n})], UserDashboardComponent);","map":{"version":3,"names":["Component","UserDashboardComponent","constructor","authService","eventService","reservationService","userInfo","updatedUserInfo","currentView","events","selectedEvents","date","location","keyword","selectedEventId","numberOfTickets","ngOnInit","loadUserInfo","loadAllEvents","username","getUsername","getUserInfo","subscribe","info","error","console","updateUser","response","log","status","changeView","view","getEvents","bookEvent","eventId","confirmReservation","createReservation","email","Date","toISOString","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\user\\Desktop\\Nouveau dossier (5)\\Hello-Event-frontend\\src\\app\\event-booking\\event-booking.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { EventService } from '../event.service';\nimport { ReservationService } from '../reservation.service';\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  role: string;\n}\ninterface Event {\n  id: number;\n  name: string;\n  date: string | Date;\n  location: string;\n  isUserEvent?: boolean;\n  description: string;\n}\n\n@Component({\n  selector: 'app-user-dashboard',\n  templateUrl: './user-dashboard.component.html',\n  styleUrls: ['./user-dashboard.component.css']\n})\nexport class UserDashboardComponent implements OnInit {\n  userInfo: User | null = null;\n  updatedUserInfo: Partial<User> = {};\n  currentView: string = 'profile';\n  events: Event[] = [];\n  selectedEvents: any[] = [];\n  date: string = '';\n  location: string = '';\n  keyword: string = '';\n\n  selectedEventId: number | null = null; // Add this property\n  numberOfTickets: number = 1; // Add this property to store the number of tickets\n\n  constructor(\n    private authService: AuthService,\n    private eventService: EventService,\n    private reservationService: ReservationService // Add ReservationService\n  ) { }\n\n  ngOnInit() {\n    this.loadUserInfo();\n    this.loadAllEvents();\n  }\n\n  loadUserInfo() {\n    const username = this.authService.getUsername();\n    if (username) {\n      this.authService.getUserInfo(username).subscribe(\n        info => {\n          this.userInfo = info;\n          this.updatedUserInfo = { ...info };\n        },\n        error => {\n          console.error('Erreur lors de la récupération des informations utilisateur', error);\n        }\n      );\n    }\n  }\n\n  updateUser() {\n    if (this.userInfo) {\n      this.authService.updateUser({ ...this.userInfo, ...this.updatedUserInfo }).subscribe(\n        response => {\n          console.log('User updated successfully', response);\n          this.userInfo = response;\n        },\n        error => {\n          if (error.status === 403) {\n            console.error('Access is forbidden: Check your token and user permissions.');\n          } else {\n            console.error('An error occurred:', error);\n          }\n        }\n      );\n    }\n  }\n\n  changeView(view: string) {\n    this.currentView = view;\n  }\n\n  loadAllEvents() {\n    this.eventService.getEvents().subscribe(\n      (events: Event[]) => {\n        this.events = events;\n      },\n      error => {\n        console.error('Erreur lors du chargement des événements', error);\n      }\n    );\n  }\n\n  // Add this method to handle booking an event\n  bookEvent(eventId: number) {\n    // Logic to open the reservation form with the event ID\n    this.currentView = 'reservation';\n    this.selectedEventId = eventId;\n  }\n\n  // Add this method to handle reservation confirmation\n  confirmReservation() {\n    if (this.userInfo && this.selectedEventId !== null) {\n      this.reservationService.createReservation(\n        this.userInfo.email,\n        this.selectedEventId,\n        this.numberOfTickets,\n        new Date().toISOString()\n      ).subscribe(\n        response => {\n          console.log('Réservation réussie:', response);\n          this.currentView = 'events';\n        },\n        error => {\n          console.error('Erreur lors de la réservation', error);\n        }\n      );\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}