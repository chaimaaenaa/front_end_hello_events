{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction UserDashboardComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2, \"Informations utilisateur\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"form\", 1);\n    i0.ɵɵlistener(\"ngSubmit\", function UserDashboardComponent_div_4_Template_form_ngSubmit_3_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.updateUser());\n    });\n    i0.ɵɵelementStart(4, \"label\", 2);\n    i0.ɵɵtext(5, \"Nom d'utilisateur:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"input\", 3);\n    i0.ɵɵlistener(\"ngModelChange\", function UserDashboardComponent_div_4_Template_input_ngModelChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.updatedUserInfo.username = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"br\");\n    i0.ɵɵelementStart(8, \"label\", 4);\n    i0.ɵɵtext(9, \"Email:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"input\", 5);\n    i0.ɵɵlistener(\"ngModelChange\", function UserDashboardComponent_div_4_Template_input_ngModelChange_10_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updatedUserInfo.email = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(11, \"br\");\n    i0.ɵɵelementStart(12, \"label\", 6);\n    i0.ɵɵtext(13, \"R\\u00F4le:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"input\", 7);\n    i0.ɵɵlistener(\"ngModelChange\", function UserDashboardComponent_div_4_Template_input_ngModelChange_14_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.updatedUserInfo.role = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(15, \"br\");\n    i0.ɵɵelementStart(16, \"button\", 8);\n    i0.ɵɵtext(17, \"Mettre \\u00E0 jour\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(18, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function UserDashboardComponent_div_4_Template_button_click_18_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.deleteUser());\n    });\n    i0.ɵɵtext(19, \"Supprimer mon compte\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.updatedUserInfo.username);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.updatedUserInfo.email);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.updatedUserInfo.role);\n  }\n}\nexport class UserDashboardComponent {\n  constructor(authService) {\n    this.authService = authService;\n    this.updatedUserInfo = {};\n  }\n  ngOnInit() {\n    const username = this.authService.getUsername();\n    if (username) {\n      this.authService.getUserInfo(username).subscribe(info => {\n        this.userInfo = info;\n        this.updatedUserInfo = {\n          ...info\n        }; // Copier les infos utilisateur pour mise à jour\n      }, error => {\n        console.error('Erreur lors de la récupération des informations utilisateur', error);\n      });\n    }\n  }\n  updateUser() {\n    this.authService.updateUser(this.updatedUserInfo).subscribe(updatedUser => {\n      console.log('Informations utilisateur mises à jour', updatedUser);\n      this.userInfo = updatedUser;\n    }, error => {\n      console.error('Erreur lors de la mise à jour des informations utilisateur', error);\n    });\n  }\n  deleteUser() {\n    if (confirm('Êtes-vous sûr de vouloir supprimer votre compte ? Cette action est irréversible.')) {\n      this.authService.deleteUser(this.userInfo.id).subscribe(() => {\n        console.log('Compte utilisateur supprimé');\n        // Rediriger l'utilisateur vers la page de login ou d'accueil après suppression\n      }, error => {\n        console.error('Erreur lors de la suppression du compte utilisateur', error);\n      });\n    }\n  }\n  static #_ = this.ɵfac = function UserDashboardComponent_Factory(t) {\n    return new (t || UserDashboardComponent)(i0.ɵɵdirectiveInject(i1.AuthService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UserDashboardComponent,\n    selectors: [[\"app-user-dashboard\"]],\n    decls: 5,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [3, \"ngSubmit\"], [\"for\", \"username\"], [\"type\", \"text\", \"id\", \"username\", \"name\", \"username\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"name\", \"email\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"role\"], [\"type\", \"text\", \"id\", \"role\", \"name\", \"role\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"], [3, \"click\"]],\n    template: function UserDashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"user-dashboard works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"h2\");\n        i0.ɵɵtext(3, \"Tableau de bord utilisateur\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, UserDashboardComponent_div_4_Template, 20, 3, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.userInfo);\n      }\n    },\n    dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","UserDashboardComponent_div_4_Template_form_ngSubmit_3_listener","ɵɵrestoreView","_r2","ctx_r1","ɵɵnextContext","ɵɵresetView","updateUser","UserDashboardComponent_div_4_Template_input_ngModelChange_6_listener","$event","ctx_r3","updatedUserInfo","username","ɵɵelement","UserDashboardComponent_div_4_Template_input_ngModelChange_10_listener","ctx_r4","email","UserDashboardComponent_div_4_Template_input_ngModelChange_14_listener","ctx_r5","role","UserDashboardComponent_div_4_Template_button_click_18_listener","ctx_r6","deleteUser","ɵɵadvance","ɵɵproperty","ctx_r0","UserDashboardComponent","constructor","authService","ngOnInit","getUsername","getUserInfo","subscribe","info","userInfo","error","console","updatedUser","log","confirm","id","_","ɵɵdirectiveInject","i1","AuthService","_2","selectors","decls","vars","consts","template","UserDashboardComponent_Template","rf","ctx","ɵɵtemplate","UserDashboardComponent_div_4_Template"],"sources":["C:\\Users\\user\\Desktop\\Nouveau dossier (5)\\Hello-Event-frontend\\src\\app\\user-dashboard\\user-dashboard.component.ts","C:\\Users\\user\\Desktop\\Nouveau dossier (5)\\Hello-Event-frontend\\src\\app\\user-dashboard\\user-dashboard.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\n\n@Component({\n  selector: 'app-user-dashboard',\n  templateUrl: './user-dashboard.component.html',\n  styleUrls: ['./user-dashboard.component.css']\n})\nexport class UserDashboardComponent implements OnInit {\n  userInfo: any;\n  updatedUserInfo: any = {};\n\n  constructor(private authService: AuthService) { }\n\n  ngOnInit() {\n    const username = this.authService.getUsername();\n    if (username) {\n      this.authService.getUserInfo(username).subscribe(\n        info => {\n          this.userInfo = info;\n          this.updatedUserInfo = { ...info }; // Copier les infos utilisateur pour mise à jour\n        },\n        error => {\n          console.error('Erreur lors de la récupération des informations utilisateur', error);\n        }\n      );\n    }\n  }\n\n  updateUser() {\n    this.authService.updateUser(this.updatedUserInfo).subscribe(\n      updatedUser => {\n        console.log('Informations utilisateur mises à jour', updatedUser);\n        this.userInfo = updatedUser;\n      },\n      error => {\n        console.error('Erreur lors de la mise à jour des informations utilisateur', error);\n      }\n    );\n  }\n\n  deleteUser() {\n    if (confirm('Êtes-vous sûr de vouloir supprimer votre compte ? Cette action est irréversible.')) {\n      this.authService.deleteUser(this.userInfo.id).subscribe(\n        () => {\n          console.log('Compte utilisateur supprimé');\n          // Rediriger l'utilisateur vers la page de login ou d'accueil après suppression\n        },\n        error => {\n          console.error('Erreur lors de la suppression du compte utilisateur', error);\n        }\n      );\n    }\n  }\n}\n","<p>user-dashboard works!</p>\n<h2>Tableau de bord utilisateur</h2>\n<div *ngIf=\"userInfo\">\n  <h3>Informations utilisateur</h3>\n  <form (ngSubmit)=\"updateUser()\">\n    <label for=\"username\">Nom d'utilisateur:</label>\n    <input type=\"text\" id=\"username\" [(ngModel)]=\"updatedUserInfo.username\" name=\"username\" required>\n    <br>\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" [(ngModel)]=\"updatedUserInfo.email\" name=\"email\" required>\n    <br>\n    <label for=\"role\">Rôle:</label>\n    <input type=\"text\" id=\"role\" [(ngModel)]=\"updatedUserInfo.role\" name=\"role\" required>\n    <br>\n    <button type=\"submit\">Mettre à jour</button>\n  </form>\n  <button (click)=\"deleteUser()\">Supprimer mon compte</button>\n</div>\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}