{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8082/api/users';\n  }\n  login(username, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      username,\n      password\n    }).pipe(tap(response => {\n      if (response.token) {\n        localStorage.setItem('token', response.token);\n        localStorage.setItem('userRole', response.role);\n        localStorage.setItem('username', username);\n      }\n    }));\n  }\n  getUserInfo(username) {\n    return this.http.get(`${this.apiUrl}/${username}`);\n  }\n  getUsername() {\n    return localStorage.getItem('username');\n  }\n  getUserRole() {\n    return localStorage.getItem('userRole');\n  }\n  register(user) {\n    return this.http.post(`${this.apiUrl}/register`, user);\n  }\n  logout() {\n    localStorage.removeItem('token');\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  updateUser(user) {\n    return this.http.put(`${this.apiUrl}/update`, user);\n  }\n  getAllUsers() {\n    return this.http.get(`${this.apiUrl}/all`);\n  }\n  deleteUser(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["tap","AuthService","constructor","http","apiUrl","login","username","password","post","pipe","response","token","localStorage","setItem","role","getUserInfo","get","getUsername","getItem","getUserRole","register","user","logout","removeItem","isLoggedIn","getToken","updateUser","put","getAllUsers","deleteUser","id","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\user\\Desktop\\Nouveau dossier (5)\\Hello-Event-frontend\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:8082/api/users';\n\n  constructor(private http: HttpClient) { }\n\n  login(username: string, password: string): Observable<{token: string, role: string}> {\n    return this.http.post<{token: string, role: string}>(`${this.apiUrl}/login`, { username, password }).pipe(\n      tap(response => {\n        if (response.token) {\n          localStorage.setItem('token', response.token);\n          localStorage.setItem('userRole', response.role);\n          localStorage.setItem('username', username);\n        }\n      })\n    );\n  }\n  getUserInfo(username: string): Observable<any> {\n    return this.http.get(`${this.apiUrl}/${username}`);\n  }\n\n  getUsername(): string | null {\n    return localStorage.getItem('username');\n  }\n\n  getUserRole(): string | null {\n    return localStorage.getItem('userRole');\n  }\n  register(user: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/register`, user);\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n  }\n\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n  updateUser(user: any): Observable<any> {\n    return this.http.put(`${this.apiUrl}/update`, user);\n  }\n\n  getAllUsers(): Observable<any> {\n    return this.http.get(`${this.apiUrl}/all`);\n  }\n\n  deleteUser(id: number): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n\n}\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,iCAAiC;EAEV;EAExCC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAgC,GAAG,IAAI,CAACJ,MAAM,QAAQ,EAAE;MAAEE,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAACE,IAAI,CACvGT,GAAG,CAACU,QAAQ,IAAG;MACb,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAClBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACC,KAAK,CAAC;QAC7CC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEH,QAAQ,CAACI,IAAI,CAAC;QAC/CF,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEP,QAAQ,CAAC;;IAE9C,CAAC,CAAC,CACH;EACH;EACAS,WAAWA,CAACT,QAAgB;IAC1B,OAAO,IAAI,CAACH,IAAI,CAACa,GAAG,CAAC,GAAG,IAAI,CAACZ,MAAM,IAAIE,QAAQ,EAAE,CAAC;EACpD;EAEAW,WAAWA,CAAA;IACT,OAAOL,YAAY,CAACM,OAAO,CAAC,UAAU,CAAC;EACzC;EAEAC,WAAWA,CAAA;IACT,OAAOP,YAAY,CAACM,OAAO,CAAC,UAAU,CAAC;EACzC;EACAE,QAAQA,CAACC,IAAS;IAChB,OAAO,IAAI,CAAClB,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACJ,MAAM,WAAW,EAAEiB,IAAI,CAAC;EACxD;EAEAC,MAAMA,CAAA;IACJV,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;EAClC;EAEAC,UAAUA,CAAA;IACR,OAAO,CAAC,CAACZ,YAAY,CAACM,OAAO,CAAC,OAAO,CAAC;EACxC;EAEAO,QAAQA,CAAA;IACN,OAAOb,YAAY,CAACM,OAAO,CAAC,OAAO,CAAC;EACtC;EACAQ,UAAUA,CAACL,IAAS;IAClB,OAAO,IAAI,CAAClB,IAAI,CAACwB,GAAG,CAAC,GAAG,IAAI,CAACvB,MAAM,SAAS,EAAEiB,IAAI,CAAC;EACrD;EAEAO,WAAWA,CAAA;IACT,OAAO,IAAI,CAACzB,IAAI,CAACa,GAAG,CAAC,GAAG,IAAI,CAACZ,MAAM,MAAM,CAAC;EAC5C;EAEAyB,UAAUA,CAACC,EAAU;IACnB,OAAO,IAAI,CAAC3B,IAAI,CAAC4B,MAAM,CAAC,GAAG,IAAI,CAAC3B,MAAM,IAAI0B,EAAE,EAAE,CAAC;EACjD;EAAC,QAAAE,CAAA,G;qBApDU/B,WAAW,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXpC,WAAW;IAAAqC,OAAA,EAAXrC,WAAW,CAAAsC,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}