{"ast":null,"code":"\"use strict\";\n\n/*import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { EventService } from '../event.service';\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  role: string;\n}\ninterface Event {\n  id: number;\n  name: string;\n  date: string | Date;\n  location : string;\n  isUserEvent?: boolean;\n  description : string;\n}\n@Component({\n  selector: 'app-user-dashboard',\n  templateUrl: './user-dashboard.component.html',\n  styleUrls: ['./user-dashboard.component.css']\n})\nexport class UserDashboardComponent implements OnInit {\n  userInfo: User | null = null;\n  updatedUserInfo: Partial<User> = {};\n  currentView: string = 'profile';\n  events: Event[] = [];\n  selectedEvents: any[] = [];\n  date: string = '';\n  location: string = '';\n  keyword: string = '';\n  selectedEventId: number | null = null;\n\n  constructor(\n    private authService: AuthService,\n    private eventService: EventService\n  ) { }\n\n  ngOnInit() {\n    this.loadUserInfo();\n    this.loadAllEvents();\n  }\n  parseDate(dateString: string): Date {\n    const [datePart, timePart] = dateString.split(' ');\n    const [day, month, year] = datePart.split('/').map(Number);\n    const [hours, minutes] = timePart.split(':').map(Number);\n    return new Date(year, month - 1, day, hours, minutes);\n  }\n  loadUserInfo() {\n    const username = this.authService.getUsername();\n    if (username) {\n      this.authService.getUserInfo(username).subscribe(\n        info => {\n          this.userInfo = info;\n          this.updatedUserInfo = { ...info };\n        },\n        error => {\n          console.error('Erreur lors de la récupération des informations utilisateur', error);\n        }\n      );\n    }\n  }\n\n  updateUser() {\n    if (this.userInfo) {\n      this.authService.updateUser({ ...this.userInfo, ...this.updatedUserInfo }).subscribe(\n        response => {\n          console.log('User updated successfully', response);\n          this.userInfo = response;\n        },\n        error => {\n          if (error.status === 403) {\n            console.error('Access is forbidden: Check your token and user permissions.');\n          } else {\n            console.error('An error occurred:', error);\n          }\n        }\n      );\n    }\n  }\n  bookEvent(eventId: number) {\n    this.currentView = 'reservation';\n    this.selectedEventId = eventId;\n  }\n  changeView(view: string) {\n    this.currentView = view;\n  }\n\n  loadAllEvents() {\n    this.eventService.getEvents().subscribe(\n      (events: Event[]) => {\n        console.log('Events reçus:', events);\n        events.forEach(event => {\n          console.log('Date brute de l\\'événement:', event.date);\n        });\n        this.events = events;\n      },\n      error => {\n        console.error('Erreur lors du chargement des événements', error);\n      }\n    );\n  }\n\n\n\n  toggleEventSelection(event: any) {\n    const index = this.selectedEvents.findIndex(e => e.id === event.id);\n    if (index > -1) {\n      this.selectedEvents.splice(index, 1);\n    } else {\n      this.selectedEvents.push(event);\n    }\n  }\n\n  saveHomePageEvents() {\n    this.eventService.saveHomePageEvents(this.selectedEvents).subscribe(\n      response => {\n        console.log('Home page events saved successfully', response);\n      },\n      error => {\n        console.error('Error saving home page events', error);\n      }\n    );\n  }\n  searchEvents() {\n    this.eventService.searchEvents(this.date, this.location, this.keyword).subscribe(\n      (events: Event[]) => {\n        console.log('Résultats de la recherche:', events);\n        this.events = events;\n      },\n      error => {\n        console.error('Erreur lors de la recherche des événements', error);\n      }\n    );\n  }\n}\n*/","map":{"version":3,"names":[],"sources":["C:\\Users\\user\\Desktop\\Nouveau dossier (5)\\Hello-Event-frontend\\src\\app\\user-dashboard\\user-dashboard.component.ts"],"sourcesContent":["/*import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { EventService } from '../event.service';\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  role: string;\n}\ninterface Event {\n  id: number;\n  name: string;\n  date: string | Date;\n  location : string;\n  isUserEvent?: boolean;\n  description : string;\n}\n@Component({\n  selector: 'app-user-dashboard',\n  templateUrl: './user-dashboard.component.html',\n  styleUrls: ['./user-dashboard.component.css']\n})\nexport class UserDashboardComponent implements OnInit {\n  userInfo: User | null = null;\n  updatedUserInfo: Partial<User> = {};\n  currentView: string = 'profile';\n  events: Event[] = [];\n  selectedEvents: any[] = [];\n  date: string = '';\n  location: string = '';\n  keyword: string = '';\n  selectedEventId: number | null = null;\n\n  constructor(\n    private authService: AuthService,\n    private eventService: EventService\n  ) { }\n\n  ngOnInit() {\n    this.loadUserInfo();\n    this.loadAllEvents();\n  }\n  parseDate(dateString: string): Date {\n    const [datePart, timePart] = dateString.split(' ');\n    const [day, month, year] = datePart.split('/').map(Number);\n    const [hours, minutes] = timePart.split(':').map(Number);\n    return new Date(year, month - 1, day, hours, minutes);\n  }\n  loadUserInfo() {\n    const username = this.authService.getUsername();\n    if (username) {\n      this.authService.getUserInfo(username).subscribe(\n        info => {\n          this.userInfo = info;\n          this.updatedUserInfo = { ...info };\n        },\n        error => {\n          console.error('Erreur lors de la récupération des informations utilisateur', error);\n        }\n      );\n    }\n  }\n\n  updateUser() {\n    if (this.userInfo) {\n      this.authService.updateUser({ ...this.userInfo, ...this.updatedUserInfo }).subscribe(\n        response => {\n          console.log('User updated successfully', response);\n          this.userInfo = response;\n        },\n        error => {\n          if (error.status === 403) {\n            console.error('Access is forbidden: Check your token and user permissions.');\n          } else {\n            console.error('An error occurred:', error);\n          }\n        }\n      );\n    }\n  }\n  bookEvent(eventId: number) {\n    this.currentView = 'reservation';\n    this.selectedEventId = eventId;\n  }\n  changeView(view: string) {\n    this.currentView = view;\n  }\n\n  loadAllEvents() {\n    this.eventService.getEvents().subscribe(\n      (events: Event[]) => {\n        console.log('Events reçus:', events);\n        events.forEach(event => {\n          console.log('Date brute de l\\'événement:', event.date);\n        });\n        this.events = events;\n      },\n      error => {\n        console.error('Erreur lors du chargement des événements', error);\n      }\n    );\n  }\n\n\n\n  toggleEventSelection(event: any) {\n    const index = this.selectedEvents.findIndex(e => e.id === event.id);\n    if (index > -1) {\n      this.selectedEvents.splice(index, 1);\n    } else {\n      this.selectedEvents.push(event);\n    }\n  }\n\n  saveHomePageEvents() {\n    this.eventService.saveHomePageEvents(this.selectedEvents).subscribe(\n      response => {\n        console.log('Home page events saved successfully', response);\n      },\n      error => {\n        console.error('Error saving home page events', error);\n      }\n    );\n  }\n  searchEvents() {\n    this.eventService.searchEvents(this.date, this.location, this.keyword).subscribe(\n      (events: Event[]) => {\n        console.log('Résultats de la recherche:', events);\n        this.events = events;\n      },\n      error => {\n        console.error('Erreur lors de la recherche des événements', error);\n      }\n    );\n  }\n}\n*/\n"],"mappings":";;AAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}