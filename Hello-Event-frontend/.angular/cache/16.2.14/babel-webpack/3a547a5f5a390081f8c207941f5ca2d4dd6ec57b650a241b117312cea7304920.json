{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8082/api/users';\n  }\n  getHeaders() {\n    const token = localStorage.getItem('token');\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n  }\n  login(username, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      username,\n      password\n    }).pipe(tap(response => {\n      if (response.token) {\n        localStorage.setItem('token', response.token);\n        localStorage.setItem('userRole', response.role);\n        localStorage.setItem('username', username);\n      }\n    }));\n  }\n  getUserInfo(username) {\n    return this.http.get(`${this.apiUrl}/${username}`);\n  }\n  getUsername() {\n    return localStorage.getItem('username');\n  }\n  getUserRole() {\n    return localStorage.getItem('userRole');\n  }\n  register(user) {\n    return this.http.post(`${this.apiUrl}/register`, user);\n  }\n  logout() {\n    localStorage.removeItem('token');\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  getAllUsers() {\n    return this.http.get(`${this.apiUrl}/all`);\n  }\n  updateUser(user) {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.getToken());\n    return this.http.put(`${this.baseUrl}/users/update`, user, {\n      headers\n    });\n  }\n  deleteUser(userId) {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.getToken());\n    return this.http.delete(`${this.baseUrl}/users/delete/${userId}`, {\n      headers\n    });\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","tap","AuthService","constructor","http","apiUrl","getHeaders","token","localStorage","getItem","login","username","password","post","pipe","response","setItem","role","getUserInfo","get","getUsername","getUserRole","register","user","logout","removeItem","isLoggedIn","getToken","getAllUsers","updateUser","headers","set","put","baseUrl","deleteUser","userId","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\user\\Desktop\\Nouveau dossier (5)\\Hello-Event-frontend\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:8082/api/users';\n\n  constructor(private http: HttpClient) { }\n  private getHeaders() {\n    const token = localStorage.getItem('token');\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n  }\n  login(username: string, password: string): Observable<{token: string, role: string}> {\n    return this.http.post<{token: string, role: string}>(`${this.apiUrl}/login`, { username, password }).pipe(\n      tap(response => {\n        if (response.token) {\n          localStorage.setItem('token', response.token);\n          localStorage.setItem('userRole', response.role);\n          localStorage.setItem('username', username);\n        }\n      })\n    );\n  }\n  getUserInfo(username: string): Observable<any> {\n    return this.http.get(`${this.apiUrl}/${username}`);\n  }\n\n  getUsername(): string | null {\n    return localStorage.getItem('username');\n  }\n\n  getUserRole(): string | null {\n    return localStorage.getItem('userRole');\n  }\n  register(user: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/register`, user);\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n  }\n\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n\n  getAllUsers(): Observable<any> {\n    return this.http.get(`${this.apiUrl}/all`);\n  }\n  updateUser(user: any): Observable<any> {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.getToken());\n    return this.http.put(`${this.baseUrl}/users/update`, user, { headers });\n  }\n\n  deleteUser(userId: number): Observable<any> {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.getToken());\n    return this.http.delete(`${this.baseUrl}/users/delete/${userId}`, { headers });\n  }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}