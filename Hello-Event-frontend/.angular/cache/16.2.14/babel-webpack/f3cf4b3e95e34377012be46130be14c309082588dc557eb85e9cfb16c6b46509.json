{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class EventService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = 'http://localhost:8082/api/events';\n    this.reservationApi = 'http://localhost:8082/api';\n  } // Corrected injection\n  getEvents() {\n    return this.http.get(`${this.apiUrl}`).pipe(catchError(error => {\n      console.error('Erreur brute:', error);\n      return throwError('Erreur lors du chargement des événements. Veuillez réessayer.');\n    }));\n  }\n  searchEvents(date, location, keyword) {\n    return this.http.get(`${this.apiUrl}/search`, {\n      params: {\n        date,\n        location,\n        keyword\n      }\n    });\n  }\n  getEventDetails(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  /* createReservation(eventId: number, numberOfTickets: number): Observable<any> {\n     const token = this.authService.getToken();\n     const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n         const body = {\n       eventId: eventId,\n       numberOfTickets: numberOfTickets\n     };\n         return this.http.post<any>(`${this.reservationApi}/reservation`, body, { headers, responseType: 'json' }).pipe(\n       catchError(error => {\n         console.error('Error making reservation:', error);\n         return throwError('Error making reservation. Please try again.');\n       })\n     );\n   }\n   getUserReservations(): Observable<Reservation[]> {\n     return this.http.get<Reservation[]>(`${this.reservationApi}/reservations`);\n   }\n  */\n  createReservation(eventId, numberOfTickets) {\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    const body = {\n      eventId: eventId,\n      numberOfTickets: numberOfTickets\n    };\n    return this.http.post(`${this.reservationApi}/reservation`, body, {\n      headers\n    }).pipe(catchError(error => {\n      console.error('Error making reservation:', error);\n      return throwError(() => new Error('Error making reservation. Please try again.'));\n    }));\n  }\n  getUserReservations() {\n    return this.http.get(`${this.reservationApi}/reservations`).pipe(catchError(error => {\n      console.error('Error loading reservations:', error);\n      return throwError('Error loading reservations. Please try again.');\n    }));\n  }\n  getAboutInfo() {\n    return this.http.get(`${this.apiUrl}/about`);\n  }\n  submitContact(contactData) {\n    return this.http.post(`${this.apiUrl}/contact`, contactData);\n  }\n  saveHomePageEvents(selectedEvents) {\n    return this.http.post(`${this.apiUrl}/home-events`, selectedEvents);\n  }\n  getUserEvents(userId) {\n    return this.http.get(`${this.apiUrl}/user/${userId}`);\n  }\n  static #_ = this.ɵfac = function EventService_Factory(t) {\n    return new (t || EventService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventService,\n    factory: EventService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","catchError","throwError","EventService","constructor","http","authService","apiUrl","reservationApi","getEvents","get","pipe","error","console","searchEvents","date","location","keyword","params","getEventDetails","id","createReservation","eventId","numberOfTickets","token","getToken","headers","set","body","post","Error","getUserReservations","getAboutInfo","submitContact","contactData","saveHomePageEvents","selectedEvents","getUserEvents","userId","_","i0","ɵɵinject","i1","HttpClient","i2","AuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\user\\Desktop\\Nouveau dossier (5)\\Hello-Event-frontend\\src\\app\\event.service.ts"],"sourcesContent":["/*import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {catchError, Observable, throwError} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventService {\n  private apiUrl = 'http://localhost:8082/api/events';\n\n  constructor(private http: HttpClient) { }\n\n  getEvents(): Observable<any> {\n    return this.http.get(`${this.apiUrl}`).pipe(\n      catchError(error => {\n        console.error('Erreur brute:', error);\n        return throwError('Erreur lors du chargement des événements. Veuillez réessayer.');\n      })\n    );\n  }\n\n  searchEvents(date: string, location: string, keyword: string): Observable<any> {\n    return this.http.get(`${this.apiUrl}/search`, { params: { date, location, keyword } });\n  }\n\n  getEventDetails(id: number): Observable<any> {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n\n  bookEvent(eventId: number, numberOfTickets: number): Observable<any> {\n    return this.http.post(`${this.apiUrl}/${eventId}/book`, { numberOfTickets });\n  }\n\n\n  getAboutInfo(): Observable<any> {\n    return this.http.get(`${this.apiUrl}/about`);\n  }\n\n  submitContact(contactData: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/contact`, contactData);\n  }\n  saveHomePageEvents(selectedEvents: any[]): Observable<any> {\n    return this.http.post(`${this.apiUrl}/home-events`, selectedEvents);\n  }\n  getUserEvents(userId: number): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/user/${userId}`);\n  }\n}\n*/\nimport { Injectable } from '@angular/core';\nimport {HttpClient, HttpErrorResponse, HttpHeaders} from '@angular/common/http';\nimport { catchError, Observable, throwError } from 'rxjs';\nimport { AuthService } from './auth.service';\nimport {Reservation} from \"./reservation.model\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventService {\n\n  private apiUrl = 'http://localhost:8082/api/events';\n  private reservationApi = 'http://localhost:8082/api';\n\n  constructor(private http: HttpClient, private authService: AuthService) { } // Corrected injection\n\n  getEvents(): Observable<any> {\n    return this.http.get(`${this.apiUrl}`).pipe(\n      catchError(error => {\n        console.error('Erreur brute:', error);\n        return throwError('Erreur lors du chargement des événements. Veuillez réessayer.');\n      })\n    );\n  }\n\n  searchEvents(date: string, location: string, keyword: string): Observable<any> {\n    return this.http.get(`${this.apiUrl}/search`, { params: { date, location, keyword } });\n  }\n\n  getEventDetails(id: number): Observable<any> {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n\n\n /* createReservation(eventId: number, numberOfTickets: number): Observable<any> {\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n\n    const body = {\n      eventId: eventId,\n      numberOfTickets: numberOfTickets\n    };\n\n    return this.http.post<any>(`${this.reservationApi}/reservation`, body, { headers, responseType: 'json' }).pipe(\n      catchError(error => {\n        console.error('Error making reservation:', error);\n        return throwError('Error making reservation. Please try again.');\n      })\n    );\n  }\n  getUserReservations(): Observable<Reservation[]> {\n    return this.http.get<Reservation[]>(`${this.reservationApi}/reservations`);\n  }\n*/\n  createReservation(eventId: number, numberOfTickets: number): Observable<Reservation> {\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n\n    const body = {\n      eventId: eventId,\n      numberOfTickets: numberOfTickets\n    };\n\n    return this.http.post<any>(`${this.reservationApi}/reservation`, body, { headers }).pipe(\n      catchError((error: HttpErrorResponse) => {\n        console.error('Error making reservation:', error);\n        return throwError(() => new Error('Error making reservation. Please try again.'));\n      })\n    );\n  }\n\n  getUserReservations(): Observable<Reservation[]> {\n    return this.http.get<Reservation[]>(`${this.reservationApi}/reservations`).pipe(\n      catchError((error: HttpErrorResponse) => {\n        console.error('Error loading reservations:', error);\n        return throwError('Error loading reservations. Please try again.');\n      })\n    );\n  }\n\n\n\n  getAboutInfo(): Observable<any> {\n    return this.http.get(`${this.apiUrl}/about`);\n  }\n\n  submitContact(contactData: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/contact`, contactData);\n  }\n\n  saveHomePageEvents(selectedEvents: any[]): Observable<any> {\n    return this.http.post(`${this.apiUrl}/home-events`, selectedEvents);\n  }\n\n  getUserEvents(userId: number): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/user/${userId}`);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}