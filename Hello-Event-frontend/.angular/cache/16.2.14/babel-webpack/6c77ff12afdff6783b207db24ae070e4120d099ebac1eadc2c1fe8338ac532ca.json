{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8082/api/users';\n  }\n  login(username, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      username,\n      password\n    }, {\n      responseType: 'text'\n    }).pipe(tap(token => {\n      if (token) {\n        localStorage.setItem('token', token);\n      }\n    }));\n  }\n  register(user) {\n    return this.http.post(`${this.apiUrl}/register`, user);\n  }\n  logout() {\n    localStorage.removeItem('token');\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["tap","AuthService","constructor","http","apiUrl","login","username","password","post","responseType","pipe","token","localStorage","setItem","register","user","logout","removeItem","isLoggedIn","getItem","getToken","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\user\\Desktop\\Nouveau dossier (5)\\Hello-Event-frontend\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:8082/api/users';\n\n  constructor(private http: HttpClient) { }\n\n  login(username: string, password: string): Observable<string> {\n    return this.http.post(`${this.apiUrl}/login`, { username, password }, { responseType: 'text' }).pipe(\n      tap((token: string) => {\n        if (token) {\n          localStorage.setItem('token', token);\n        }\n      })\n    );\n  }\n\n  register(user: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/register`, user);\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n  }\n\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n}\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,iCAAiC;EAEV;EAExCC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACJ,MAAM,QAAQ,EAAE;MAAEE,QAAQ;MAAEC;IAAQ,CAAE,EAAE;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC,CAACC,IAAI,CAClGV,GAAG,CAAEW,KAAa,IAAI;MACpB,IAAIA,KAAK,EAAE;QACTC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;;IAExC,CAAC,CAAC,CACH;EACH;EAEAG,QAAQA,CAACC,IAAS;IAChB,OAAO,IAAI,CAACZ,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACJ,MAAM,WAAW,EAAEW,IAAI,CAAC;EACxD;EAEAC,MAAMA,CAAA;IACJJ,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;EAClC;EAEAC,UAAUA,CAAA;IACR,OAAO,CAAC,CAACN,YAAY,CAACO,OAAO,CAAC,OAAO,CAAC;EACxC;EAEAC,QAAQA,CAAA;IACN,OAAOR,YAAY,CAACO,OAAO,CAAC,OAAO,CAAC;EACtC;EAAC,QAAAE,CAAA,G;qBA7BUpB,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXzB,WAAW;IAAA0B,OAAA,EAAX1B,WAAW,CAAA2B,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}